@page "/edit-student/{Id:guid}"
@using Pschool.Application.CQRS.ParentFolder.Commands.CreateParent
@using Pschool.Application.DTOs
@using Pschool.Domain.Entities
@using Pschool.Shared.Results
@inject NavigationManager NavigationPage


<h3>Edit Student</h3>

<EditForm Model="@Student" OnValidSubmit="@HandleValidSubmit" FormName="EditStudentForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Name">Name:</label>
        <InputText id="Name" class="form-control" @bind-Value="Student.Name" />
    </div>

    <div class="form-group">
        <label for="Surname">Surname:</label>
        <InputText id="Surname" class="form-control" @bind-Value="Student.Surname" />
    </div>

    <div class="form-group">
        <label for="LastName">LastName:</label>
        <InputText id="LastName" class="form-control" @bind-Value="Student.LastName" />
    </div>

    <div class="form-group">
        <label for="DateOfBirth">DateOfBirth:</label>
        <InputDate id="DateOfBirth" class="form-control" @bind-Value="Student.DateOfBirth" />
    </div>

    <div class="form-group">
        <label for="Gender">Gender:</label>
        <InputText id="Gender" class="form-control" @bind-Value="Student.Gender" />
    </div>
    
    <div class="form-group">
        <label for="EnrollmentDate">EnrollmentDate:</label>
        <InputDate id="EnrollmentDate" class="form-control" @bind-Value="Student.EnrollmentDate" />
    </div>

    <div class="form-group">
        <label for="Grade">Grade:</label>
        <InputText id="Grade" class="form-control" @bind-Value="Student.Grade" />
    </div>

    <button type="submit" class="btn btn-primary">Edit Parent</button>
</EditForm>


@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    public Student Student { get; set; } = new();

    [Inject] private HttpClient Http { get; set; } = new();

    [SupplyParameterFromForm]
    public Student LoadedStudent{ get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadStudent(Id);
        StateHasChanged();
    }

    private async Task LoadStudent(Guid id)
    {
        var response = await Http.PostAsJsonAsync("/api/getStudent", id);
        if (response.IsSuccessStatusCode)
        {
            var studentResult = await response.Content.ReadFromJsonAsync<Result<Student>>();
            var student = studentResult?.Data;

            if (student != null)
            {
                LoadedStudent = student;
            }
        }
    }


    private async Task HandleValidSubmit()
    {
        StateHasChanged();
        Student.Id = LoadedStudent.Id;
        var response = await Http.PostAsJsonAsync("api/updateStudent", Student);
        if (response.IsSuccessStatusCode)
        {
            NavigationPage.NavigateTo("/students");
        }
        else
        {
            NavigationPage.NavigateTo("/Error");
        }
    }
}
